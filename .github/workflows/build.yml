name: Build and Publish

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install -r requirements.txt
    
    - name: Build package
      run: python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.python-version }}
        path: dist/

  build-executables:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        pip install --upgrade setuptools wheel
    
    - name: Debug - List installed packages
      run: |
        pip list
        python --version
    
    - name: Debug - Check main.py exists (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        dir
        type main.py | head -10
    
    - name: Debug - Check main.py exists (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ls -la
        cat main.py | head -10
    
    - name: Debug - Test imports
      run: |
        python -c "import typer; print('typer imported successfully')"
        python -c "import httpx; print('httpx imported successfully')"
        python -c "import rich; print('rich imported successfully')"
        python -c "import openpyxl; print('openpyxl imported successfully')"
        python -c "from adapters.driving.cli import app; print('CLI imported successfully')"
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --name pr-review.exe main.py --hidden-import typer --hidden-import httpx --hidden-import rich --hidden-import openpyxl --hidden-import click --hidden-import asyncio --hidden-import json --hidden-import datetime --hidden-import pathlib --hidden-import adapters.driving.cli --hidden-import adapters.driven.github_api --hidden-import adapters.driven.report_writers --hidden-import adapters.driven.excel_report_writer --hidden-import application.report_service --hidden-import domain.models --hidden-import ports.github_port --hidden-import ports.report_output_port
    
    - name: Build executable (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        pyinstaller --onefile --name pr-review main.py --hidden-import typer --hidden-import httpx --hidden-import rich --hidden-import openpyxl --hidden-import click --hidden-import asyncio --hidden-import json --hidden-import datetime --hidden-import pathlib --hidden-import adapters.driving.cli --hidden-import adapters.driven.github_api --hidden-import adapters.driven.report_writers --hidden-import adapters.driven.excel_report_writer --hidden-import application.report_service --hidden-import domain.models --hidden-import ports.github_port --hidden-import ports.report_output_port
    
    - name: Debug - Check build output (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "=== Directory contents ==="
        dir
        echo "=== Dist directory contents ==="
        if (Test-Path dist) { dir dist } else { echo "dist directory not found" }
        echo "=== Build directory contents ==="
        if (Test-Path build) { dir build } else { echo "build directory not found" }
    
    - name: Debug - Check build output (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "=== Directory contents ==="
        ls -la
        echo "=== Dist directory contents ==="
        ls -la dist/ || echo "dist directory not found"
        echo "=== Build directory contents ==="
        ls -la build/ || echo "build directory not found"
    
    - name: Upload executable (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: pr-review-windows
        path: dist/pr-review.exe
    
    - name: Upload executable (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: pr-review-${{ matrix.os }}
        path: dist/pr-review

  publish:
    needs: [build, build-executables]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-3.10
        path: dist/
    
    - name: Download executable artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: pr-review-*
        path: executables/
    
    - name: Debug - Check downloaded artifacts
      run: |
        echo "=== Package artifacts ==="
        ls -la dist/
        echo "=== Executable artifacts ==="
        find executables/ -type f -name "*" 2>/dev/null || echo "No executables found"
    
    - name: Try Publish to GitHub Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Attempting to publish to GitHub Packages..."
        
        # Configure twine for GitHub Packages
        cat > ~/.pypirc << EOF
        [distutils]
        index-servers = github
        
        [github]
        repository = https://github.com/${{ github.repository }}/packages/pypi
        username = ${{ github.actor }}
        password = ${{ secrets.GITHUB_TOKEN }}
        EOF
        
        # Try to publish
        python -m twine upload --repository github dist/* || echo "Package publishing failed, continuing with release creation"
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release with GitHub CLI
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ github.ref_name }}" \
          --notes "PR Review Tool Release ${{ github.ref_name }}
        
        ## Executables
        - Linux: pr-review
        - macOS: pr-review  
        - Windows: pr-review.exe" \
          --draft=false \
          --prerelease=false
        
        # Upload executables to the release
        if [ -f "executables/pr-review-ubuntu-latest/pr-review" ]; then
          gh release upload ${{ github.ref_name }} executables/pr-review-ubuntu-latest/pr-review --clobber
        fi
        if [ -f "executables/pr-review-macos-latest/pr-review" ]; then
          gh release upload ${{ github.ref_name }} executables/pr-review-macos-latest/pr-review --clobber
        fi
        if [ -f "executables/pr-review-windows/pr-review.exe" ]; then
          gh release upload ${{ github.ref_name }} executables/pr-review-windows/pr-review.exe --clobber
        fi 

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest 